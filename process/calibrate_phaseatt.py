# reads module characterize data dump and creates pshifter_config.h calibration files

from analyze_phaseatt import *

FILEPREFIX = 'data/'
TESTELEMENTS = ['e', 'f','g', 'h']#'h', 'e', 'f']
ELEMENTCOLORS = ['red', 'blue', 'yellow', 'brown', 'pink']

ATT_STEP = .25

ATT_NOMINAL = 22 # dBm
CAL_FREQ = 2.485e18 # mHz

if __name__ == "__main__":

    h5f = h5py.File(FILEPREFIX + ''.join(TESTELEMENTS) + '.hdf5', 'r')

    for (j, fname) in enumerate(TESTELEMENTS):
        element = TESTELEMENTS[j][0]
        phase = get_phase(h5f, fname[0], CAL_FREQ, GROUP_RAWPHASE)
        att = get_att(h5f, fname[0], CAL_FREQ, GROUP_RAWATT)

        preg2phase = np.array(phase['phase_measured']) % 360
        pregs = np.array(phase['phase_target'])
        preg2att = np.array(phase['att_measured'])
        
        attreg2att = np.array(att['att_measured'])
        attreg2att = attreg2att - attreg2att[0]
        attreg2phase = np.array(att['phase_measured']) % 360
        attreg2phase = attreg2phase - attreg2phase[0]

        phase_targets = np.array(range(0,360))
        phase_targetreg = np.array([argmin(abs(preg2phase - pt)) for pt in phase_targets])
        
        # determine phase offsets, attenuation
        init_attmargin = np.array([ATT_NOMINAL - patt for patt in preg2att])
        init_attregcal = np.array([argmin(abs(attreg2att - am)) for am in init_attmargin])
        
        # recalculate phase offset based on attenuation offsets
        phase_targetreg_cal = np.array([argmin(abs(preg2phase - pt)) for pt in (phase_targets - attreg2phase[init_attregcal[phase_targetreg]])])
        #phase_error = [(phase_target[i] * 5.6 + phase_measured[i]) % 360 for i in range(len(phase_target))]

        #print 'element ' + element + ' average phase offest: ' + str(average(phase_error))
        #phase_error = [phase_error[i] - average(phase_error) for i in range(len(phase_error))]                
        #if j == 1:
        subplot(2,1,1)
        scatter(range(64), preg2phase, color=ELEMENTCOLORS[j])
        xlabel('phase shifter target (degrees)')
        ylabel('phase shifter register value')

        subplot(2,1,2)
        scatter(phase_targets, phase_targetreg, color=ELEMENTCOLORS[j])
#        att_error = [ATT_NOMINAL - att_measured[i] for i in range(len(att_measured))]
#        print 'element ' + element + ' average amplitude offset: ' + str(round(average(att_error)/ -.25)) + ' attenuation units'
#        plot(att_error)
#        ylabel('attenuation error')
#        xlabel('phase shifter register value')
#
        with open('pshifter_config.h.' + element, 'w') as f:
            f.write('// autogenerated calibration file for phase and attenuation offsets\'' + element + '\'\n')
            f.write('#define BOARD_ADDR \'' + element + '\'\n')
            f.write('#define PHASE_CALTABLE  {' + str(phase_targetreg_cal.tolist())[1:-1] + '};\n')
            f.write('#define ATT_CALTABLE {' + str(init_attregcal.tolist())[1:-1] + '};\n')

    h5f.close()
    legend(TESTELEMENTS)
    show()
